?c
log(640320*640320*640320+744)/sqrt(163)
identical(pi, log(640320**3+744)/sqrt(163)
identical(pi, log(640320**3+744)/sqrt(163)
c(1, 2, 3, 4, 5)
c(18, 1.5, 9.5, 15.5, 15, 15.5, 0.5, 14.5, 10)
notes<-c(18, 1.5, 9.5, 15.5, 15, 15.5, 0.5, 14.5, 10)
notes<-c(notes, 4)
u<- c(5, 4, 3, 2, 1)
vu/3
u/3
v>pi
u>pi
notes10<-notes/10
notes10>6
notes10.2<-notes*(1/2)
notes10.2>6
moyenne<-(notes[1]+notes[3]+notes[10])/3
moyenne
choix<-notes>10
notes[choix]
length(notes[choix])
choix<-floor(notes)
choix<-min(floor(notes))
min(notes[notes==floor(notes)])
notes2<-notes-2
choix<-notes<0
lenght(choix)
length(choix)
choix<-notes2<0
lenght(choix)
length(choix)
length(notes2[notes<0])
length((notes2[notes2<0]))
notes2[notes2<0]<-0
length(notes2[notes2==0])
collection<-c("R", "V", "B", "V")
collection
(f<-factor(collection))
collection<-c("A", "C", "A", "A", "G", "A", "T", "G", "C", "C", "A", "T", "T", "G", "T", "C")
f<-factor(collection)
f
length(f)
levels(f)
nlevels(f)
length(levels(f)="A")
length(f[f=="A"])
length(f[f=="T"])
v<-5:10
f<-factor(c("R", "V", "B", "V", "B"))
X<-data.frame(v,f, v>7)
X<-data.frame(v, f, v>7)
X<-data.frame(v, f, v > 7)
f<-factor(c("R", "V", "B", "R", "V", "B"))
X<-data.frame(v, f, v > 7)
X
X<-read.csv("sy02.csv")
X<-read.csv("sy02.csv")
X<-read.csv("sy02.csv")
X<-read.csv("sy02.csv")
X <- read.csv2('sy02')
X <- read.csv2('sy02.csv')
(t<-table(adn.seq))
(t<-table(collection))
barplot(t)
boxplot(notes)
boxplot(notes2)
boxplot(notes10.2)
donn.sep <- separ2(X, z)
Xapp <- donn.sep$Xapp
zapp <- donn.sep$zapp
Xval <- donn.sep$Xval
zval <- donn.sep$zval
Xtst <- donn.sep$Xtst
ztst <- donn.sep$ztst
for(i in 1:nrow(Xapp)){
for(j in 1:nrow(Xtst)){
distanceXtstXapp[i,j] <- distXY(Xtst[j,],Xapp[i,])
}
}
separ2 <- function(X, z)
{
g <- max(z)
Xapp <- NULL
zapp <- NULL
Xval <- NULL
zval <- NULL
Xtst <- NULL
ztst <- NULL
for (k in 1:g)
{
indk <- which(z==k)
ntot <- length(indk)
napp <- round(ntot/2)
nval <- round(ntot/4)
ntst <- ntot-napp-nval
itot <- sample(indk)
iapp <- itot[1:napp]
ival <- itot[(napp+1):(napp+nval)]
itst <- itot[(napp+nval+1):ntot]
Xapp <- rbind(Xapp, X[iapp,])
zapp <- c(zapp, z[iapp])
Xval <- rbind(Xval, X[ival,])
zval <- c(zval, z[ival])
Xtst <- rbind(Xtst, X[itst,])
ztst <- c(ztst, z[itst])
}
res <- NULL
res$Xapp <- Xapp
res$zapp <- zapp
res$Xval <- Xval
res$zval <- zval
res$Xtst <- Xtst
res$ztst <- ztst
res
}
donn.sep <- separ2(X, z)
Xapp <- donn.sep$Xapp
zapp <- donn.sep$zapp
Xval <- donn.sep$Xval
zval <- donn.sep$zval
Xtst <- donn.sep$Xtst
ztst <- donn.sep$ztst
donn.sep <- separ2(X, z)
donn <- read.csv("Synth1-40.csv")
X <- donn[,1:2]
z <- donn[,3]
donn <- read.csv("Synth1-40.csv")
setwd("Z:/TP/TP3")
donn <- read.csv("Synth1-40.csv")
X <- donn[,1:2]
z <- donn[,3]
donn <- read.csv("Synth1-40.csv")
X <- donn[,1:2]
z <- donn[,3]
donn.sep <- separ2(X, z)
Xapp <- donn.sep$Xapp
zapp <- donn.sep$zapp
Xval <- donn.sep$Xval
zval <- donn.sep$zval
Xtst <- donn.sep$Xtst
ztst <- donn.sep$ztst
for(i in 1:nrow(Xapp)){
for(j in 1:nrow(Xtst)){
distanceXtstXapp[i,j] <- distXY(Xtst[j,],Xapp[i,])
}
}
distXY <- function(X, Y)
{
X <- as.matrix(X)
Y <- as.matrix(Y)
nx <- dim(X)[1]
ny <- dim(Y)[1]
h.x <- rowSums(X^2)
h.y <- rowSums(Y^2)
ones.x <- rep(1,nx)
ones.y <- rep(1,ny)
D2xy <- h.x%*%t(ones.y) - 2*X %*% t(Y) + ones.x%*%t(h.y)
}
for(i in 1:nrow(Xapp)){
for(j in 1:nrow(Xtst)){
distanceXtstXapp[i,j] <- distXY(Xtst[j,],Xapp[i,])
}
}
distanceXtstXapp <- matrix(ncol = nrow(Xtst), nrow = nrow(Xapp))
for(i in 1:nrow(Xapp)){
for(j in 1:nrow(Xtst)){
distanceXtstXapp[i,j] <- distXY(Xtst[j,],Xapp[i,])
}
}
distanceXtstXapp 2 <- distXy(Xtst, Xapp)
distanceXtstXapp2 <- distXy(Xtst, Xapp)
distanceXtstXapp2 <- distXY(Xtst, Xapp)
distanceXtstXapp
distanceXtstXapp
distanceXtstXapp2
distanceXtstXapp
distanceXtstXapp2
View(distanceXtstXapp2)
nrow(distanceXtstXapp2)
distanceXtstXapp2 <- distXy(Xapp, Xtst)
distanceXtstXapp2 <- distXY(Xapp, Xtst)
View(distanceXtstXapp2)
kppv.val <- function(Xapp, zapp, K, Xtst)
{
etiquette <- vector(length = nrow(Xtst))
distanceXtstXapp <- matrix(ncol = nrow(Xtst), nrow = nrow(Xapp))
distanceXtstXapp <- distXY(Xapp,Xtst)
sort_table <- apply(distanceXtstXapp, 2, order); #le 2 signifie qu'on fait le trie sur les colonnes
sort_table2 <- sort_table;
for(i in 1:K){
for(j in 1:ncol(sort_table2)){
sort_table2[i,j] <- zapp[sort_table[i,j]];
}
}
sort_table2 <- sort_table2[1:K,];
if (is.null(dim(sort_table2))){
return (sort_table2);
}
else return(round(apply(sort_table2, 2, mean)));
}
kppv.tune <- function(xapp, zapp, Xval, zval, nppv){
length_nppv <- length(nppv);
listError <- vector("numeric", length_nppv);
for (i in nppv){
min <- i;
erreur_opt <- 1
result <- kppv.val(xapp, zapp, i, Xval);
print (result);
erreur <- sum((result == zval) == TRUE)/length(zval)
if (erreur_opt > erreur){
erreur_opt <- erreur;
min <- i
}
}
return (min);
}
donn.sep <- separ2(X, z)
Xapp <- donn.sep$Xapp
zapp <- donn.sep$zapp
Xval <- donn.sep$Xval
zval <- donn.sep$zval
Xtst <- donn.sep$Xtst
ztst <- donn.sep$ztst
Kopt <- kppv.tune(Xapp, zapp, Xval, zval,2*(1:6)-1)
front.kppv(Xapp, zapp, Kopt, 1000)
front.kppv <- function(Xapp, zapp, K, discretisation=50)
{
deltaX <- (max(X[,1]) -min(X[,1]))/discretisation
deltaY <- (max(X[,2]) -min(X[,2]))/discretisation
minX <- min(X[,1])-deltaX
maxX <- max(X[,1])+deltaX
minY <- min(X[,2])-deltaY
maxY <- max(X[,2])+deltaY
# grille d'affichage
grilleX <- seq(from=minX,to=maxX,by=deltaX)
naffX <- length(grilleX)
grilleY <- seq(from=minY,to=maxY,by=deltaY)
naffY <- length(grilleY)
grille <- cbind(rep.int(grilleX,times=rep(naffY,naffX)),rep(grilleY,naffX))
# calcul des valeurs de la fonction
valf <- kppv.val(Xapp, zapp, K, grille)
plot(Xapp, col=c("red","green","blue","magenta","orange")[zapp], asp=1)
contour(grilleX, grilleY, matrix(valf,nrow=naffX,byrow=T), add=T, drawlabels=FALSE, levels=1.5)
}
mu <- ceuc.app(Xapp, zapp)
front.ceuc(mu, Xapp, zapp, 1000)
Kopt <- kppv.tune(Xapp, zapp, Xval, zval,2*(1:6)-1)
front.kppv(Xapp, zapp, Kopt, 1000)
Kopt
front.kppv(Xapp, zapp, 3, 1000)
donn.sep <- separ2(X, z)
Xapp <- donn.sep$Xapp
zapp <- donn.sep$zapp
Xval <- donn.sep$Xval
zval <- donn.sep$zval
Xtst <- donn.sep$Xtst
ztst <- donn.sep$ztst
front.kppv(Xapp, zapp, 5, 1000)
Kopt <- kppv.tune(Xapp, zapp, Xval, zval,2*(1:6)-1)
front.kppv(Xapp, zapp, Kopt, 1000)
Kopt <- kppv.tune(Xapp, zapp, Xval, zval,2*(1:6)-1)
front.kppv(Xapp, zapp, 3, 50)
front.kppv(Xapp, zapp, 3, 50)
front.kppv(Xapp, zapp, 3, 50)
front.kppv(X,z,3,50)
Kopt <- kppv.tune(Xapp, zapp, Xval, zval,2*(1:6)-1)
front.kppv(Xapp, zapp, Kopt, 1000)
Xapp
front.kppv(X,z,3,50)
front.ceuc <- function(mu, Xaff, zaff, discretisation=50)
{
deltaX <- (max(X[,1]) -min(X[,1]))/discretisation
deltaY <- (max(X[,2]) -min(X[,2]))/discretisation
minX <- min(X[,1])-deltaX
maxX <- max(X[,1])+deltaX
minY <- min(X[,2])-deltaY
maxY <- max(X[,2])+deltaY
# grille d'affichage
grilleX <- seq(from=minX,to=maxX,by=deltaX)
naffX <- length(grilleX)
grilleY <- seq(from=minY,to=maxY,by=deltaY)
naffY <- length(grilleY)
grille <- cbind(rep.int(grilleX,times=rep(naffY,naffX)),rep(grilleY,naffX))
# calcul des valeurs de la fonction
valf <- ceuc.val(grille,mu)
plot(Xaff, col=c("red","green","blue","magenta","orange")[zaff], asp=1)
contour(grilleX, grilleY, matrix(valf,nrow=naffX,byrow=T), add=T, drawlabels=FALSE, levels=1.5)
}
ceuc.app <- function(Xapp, zapp)
{
napp <- nrow(Xapp);
p <- ncol(Xapp);
matclasse1 <- matrix(0, napp, p);
matclasse2 <- matrix(0, napp, p);
mu <- matrix(nrow = 2, ncol = p);
j = 1;
k = 1 ;
for (i in 1:napp)
{
if (zapp[i] == 1){
matclasse1[j,] = as.matrix(Xapp[i,]);
j = j + 1;
}
else {matclasse2[k,] = as.matrix(Xapp[i,]);
k = k+1;} #on stocke dans la matrice pour la classe 2 à l'indice k l'individu associé
}
mu[1,] <- (apply(matclasse1[1:j-1,], 2, mean));#on applique la moyenne aux colonnes
mu[2,] <- (apply(matclasse2[1:k-1,],2, mean));
return(mu);
}
ceuc.val <- function(Xtst, mu)
{
ntst <- nrow(Xtst)
p <- ncol(Xtst)
etiquette <- vector("numeric", ntst);
distance <- distXY(Xtst, mu);
for (i in 1:ntst) {
if (distance[i, 1] < distance[i, 2])#on cherche à savoir à quelle classe appartient l'individu
{
etiquette[i] = 1;
}
else etiquette[i] = 2;
}
return(etiquette);
}
front.ceuc(mu, X, z, 1000)
mu <- ceuc.app(X, z)
front.ceuc(mu, Xapp, zapp, 1000)
front.ceuc(mu, X, z, 1000)
front.ceuc(mu, X, z, 1000)
donn40 <- read.csv("Synth1-40.csv")
X40 <- donn40[,1:2]
z40 <- donn40[,3]
View(donn40)
summary(donn40)
round(mean(donn40$z)
)
prop_40 <- nrow(donn40$z == 1)/nrow(donn40)
mu_40 <- round(mean(donn40$z))
prop_40
nrow(donn40$z == 1)
donn40$z == 1
nrow( (donn40$z == 1) == TRUE )
prop_40 <- nrow(donn40[donn40$z == 1)/nrow(donn40)
prop_40 <- nrow(donn40[donn40$z == 1])/nrow(donn40)
prop_40 <- nrow(donn40[donn40$z == 1,])/nrow(donn40)
prop_40
prop_40_c1 <- nrow(donn40[donn40$z == 1,])/nrow(donn40)
prop_40_c2 <- nrow(donn40[donn40$z == 2,])/nrow(donn40)
prop_40_c1 + prop_40_c2
table(z40)
ncol(table(z40))
ncol(as.data.fram(table(z40)))
ncol(as.data.frame(table(z40)))
var(donn40[donne40$z == 1,])
var(donn40[donn40$z == 1,])
var(donn40[donn40$z == 1,1:2])
I
donn40 <- read.csv("Synth1-40.csv")
X40 <- donn40[,1:2]
z40 <- donn40[,3]
donn100 <- read.csv("Synth1-100.csv")
X100 <- donn100[,1:2]
z100 <- donn100[,3]
donn500 <- read.csv("Synth1-500.csv")
X500 <- donn500[,1:2]
z500 <- donn500[,3]
donn1000 <- read.csv("Synth1-1000.csv")
X1000 <- donn1000[,1:2]
z1000 <- donn1000[,3]
donn1000_2 <- read.csv("Synth2-1000.csv")
X1000_2 <- donn1000[,1:2]
z1000_2 <- donn1000[,3]
donn_list = list(donn40, donn100, donn500, donn1000, donn1000_2);
for (i in 1:length(donn_list)) {
data = as.data.frame(donn_list[i]);
mu1 = apply(data[which(data$V3 == 1), 1:2], 2, mean);
mu2 = apply(data[which(data$V3 == 2), 1:2], 2, mean);
epsilon1 = cov(data[which(data$V3 == 1), 1:2]);
epsilon2 = cov(data[which(data$V3 == 2), 1:2]);
pi1 = dim(data[which(data$V3 == 1),])[1] / dim(data)[1];
pi2 = dim(data[which(data$V3 == 2),])[1] / dim(data)[1];
df = data.frame("mu1" = mu1, "mu2" = mu2, "epsilon1" = epsilon1, "epsilon2" = epsilon2, "pi1" = pi1, "pi2" = pi2);
write.table(df, paste("synth", fns[i],"_", individuals_numbers[i], "_analysis.csv", sep=""));
}
fns = c("1", "1", "1", "1", "2"
fns = c("1", "1", "1", "1", "2");
fns = c("1", "1", "1", "1", "2");
for (i in 1:length(donn_list)) {
data = as.data.frame(donn_list[i]);
mu1 = apply(data[which(data$V3 == 1), 1:2], 2, mean);
mu2 = apply(data[which(data$V3 == 2), 1:2], 2, mean);
epsilon1 = cov(data[which(data$V3 == 1), 1:2]);
epsilon2 = cov(data[which(data$V3 == 2), 1:2]);
pi1 = dim(data[which(data$V3 == 1),])[1] / dim(data)[1];
pi2 = dim(data[which(data$V3 == 2),])[1] / dim(data)[1];
df = data.frame("mu1" = mu1, "mu2" = mu2, "epsilon1" = epsilon1, "epsilon2" = epsilon2, "pi1" = pi1, "pi2" = pi2);
write.table(df, paste("synth", fns[i],"_", individuals_numbers[i], "_analysis.csv", sep=""));
}
individuals_numbers = c(40, 100, 500, 1000, 1000);
for (i in 1:length(donn_list)) {
data = as.data.frame(donn_list[i]);
mu1 = apply(data[which(data$V3 == 1), 1:2], 2, mean);
mu2 = apply(data[which(data$V3 == 2), 1:2], 2, mean);
epsilon1 = cov(data[which(data$V3 == 1), 1:2]);
epsilon2 = cov(data[which(data$V3 == 2), 1:2]);
pi1 = dim(data[which(data$V3 == 1),])[1] / dim(data)[1];
pi2 = dim(data[which(data$V3 == 2),])[1] / dim(data)[1];
df = data.frame("mu1" = mu1, "mu2" = mu2, "epsilon1" = epsilon1, "epsilon2" = epsilon2, "pi1" = pi1, "pi2" = pi2);
write.table(df, paste("synth", fns[i],"_", individuals_numbers[i], "_analysis.csv", sep=""));
}
df
donn_list
View(donn_list)
data$V3
for (i in 1:length(donn_list)) {
data = as.data.frame(donn_list[i]);
mu1 = apply(data[which(data$z == 1), 1:2], 2, mean);
mu2 = apply(data[which(data$z == 2), 1:2], 2, mean);
epsilon1 = cov(data[which(data$z == 1), 1:2]);
epsilon2 = cov(data[which(data$z == 2), 1:2]);
pi1 = dim(data[which(data$z == 1),])[1] / dim(data)[1];
pi2 = dim(data[which(data$z == 2),])[1] / dim(data)[1];
df = data.frame("mu1" = mu1, "mu2" = mu2, "epsilon1" = epsilon1, "epsilon2" = epsilon2, "pi1" = pi1, "pi2" = pi2);
write.table(df, paste("synth", fns[i],"_", individuals_numbers[i], "_analysis.csv", sep=""));
}
df
View(df)
